

media_session_internal = interface +c {

    cresteMediaSegment(filename: string, flag :i32): media_segment;
    addMediaSegment(segment: media_segment): bool;
    removeMediaSegment(segment: media_segment): bool;
    
    getSegments(): list<media_segment>;
    getTotalTimeRange(): media_range;

    getVideoRender(): video_render;
    getAudioRender(): audio_render;
    setAudioRunLoop(audio_loop: audio_runloop);
    setVideoRunLoop(video_loop: video_runloop);

    setDisplayLayerSize(size: size);
    getDisplayLayerSize(): size;

    setBkColor(color: vec4f);
    getBkColor(): vec4f;

    # control
    prepare();
    # start();
    stop();
}


editor_player_callback = interface +o +j {
    onPrepare(code: i32);
    onStarted(code: i32);
    onStoped(code: i32);
    onSeekTo(time_ms: i64);
    onProgressUpdated(time_ms: i64);
    onCompleted(code: i32);

    onEvent(eventid: i32, msg: map<string, string>);
}

editor_player_internal = interface +c {
    # error code
    const e_state : i32 = -3;
    const e_system : i32 = -2;
    const unknow : i32 = -1;
    const ok :i32 = 0;

    getSession(): media_session_internal;
    setCallback(callback: editor_player_callback);

    getPosition(): i64;
    play();
    pause();
    seek(time_ms: i64, flag: i32);
    isUserPaused(): bool;
    getState(): i32;
}


editor_exporter_callback = interface +o +j {
    onStarted(code: i32);
    onStoped();
    onProgressUpdated(time_ms: i64);
    onCanceled();
    onCompleted(code: i32);

    onEvent(eventid: i32, msg: map<string, string>);
}

editor_exporter_internal = interface +c {
    # error code
    const e_state : i32 = -3;
    const e_system : i32 = -2;
    const unknow : i32 = -1;
    const ok :i32 = 0;

    getSession(): media_session_internal;
    setCallback(callback: editor_exporter_callback);

    setAudioOption(option: audio_encode_option);
    setVideoOption(option: video_encode_option);

    getPosition(): i64;
    start();
    cancel();
}