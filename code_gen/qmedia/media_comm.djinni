media_range = record {
    start : i64;
    end : i64;
} deriving (eq, json)

point = record {
    x : f32;
    y : f32;
} deriving (eq, json)

size = record {
    width : i64;
    height : i64;
} deriving (eq, json)

vec3f = record {
    v1 : f32;
    v2 : f32;
    v3 : f32;
} deriving (eq, json)

vec4f = record {
    v1 : f32;
    v2 : f32;
    v3 : f32;
    v4 : f32;
} deriving (eq, json)

color4f = record {
    r : f32;
    g : f32;
    b : f32;
    a : f32;
} deriving (eq, json)

rect4f = record {
    left : f32;
    top : f32;
    right : f32;
    bottom : f32;
} deriving (eq, json)

blendfunc = record {
    const ZERO : i32 = 0;
    const ONE : i32 = 1;
    const SRC_COLOR : i32 = 768;
    const ONE_MINUS_SRC_COLOR : i32 = 769;
    const SRC_ALPHA : i32 = 770;
    const ONE_MINUS_SRC_ALPHA : i32 = 771;
    const DST_ALPHA : i32 = 772;
    const ONE_MINUS_DST_ALPHA : i32 = 773;

    const DST_COLOR : i32 = 774;
    const ONE_MINUS_DST_COLOR : i32 = 775;
    const SRC_ALPHA_SATURATE : i32 = 776;

    src : i32;
    dst : i32;
} deriving (eq, json)

audio_description = record {
    const format_unknow: i16 = -1;

    const format_u8: i16 = 0;
    const format_s16: i16 = 1;
    const format_u16: i16 = 2;
    const format_s32: i16 = 3;
    const format_u32: i16 = 4;
    const format_float: i16 = 5;

    const format_samplebuffer: i16 = 100;
    const format_bytearray: i16  = 101;

    smaple_format: i16;
    nchannel: i16;
    sample_rate: i32;
    sample_bits: i32;
}

video_description = record {
    const format_unknow: i16 = -1;

    const format_i420: i16 = 0;
    const format_yv12: i16 = 1;
    const format_nv12: i16 = 2;
    const format_nv21: i16 = 3;
    const format_rgba: i16 = 4;
    const format_bgra: i16 = 5;

    #platform formats
    const format_surfaceTexture: i16 = 100;
    const format_cvPixelBuffer: i16 = 101;
    const format_mediaCodecBuffer: i16 = 102;
    const format_oesTexture: i16 = 103;
    const format_glTexture: i16 = 104;

    width: i32;
    height: i32;
    framerate: i32;
    pixel_format: i16;
    rotation: i32;
    is_texture: bool;
    # ff field
    profile: i32;
    level: i32;
    color_range: i32;
    color_space: i32;
    color_trc: i32;
    color_primaries: i32;

    # aspect_ratio
    aspect_ratio_num: i32;
    aspect_ratio_den: i32;
}

media_stream_info = record {
    # media type
    const media_unknow: i32 = 0;
    const media_video: i32 = 1;
    const media_audio: i32 = 2;

    # codec type
    const codec_unknow: i32 = 0;
    const codec_h264: i32 = 1;
    const codec_h265: i32 = 2;
    const codec_mpeg4: i32 = 3;
    const codec_vp8: i32 = 4;
    const codec_vp9: i32 = 5;

    const codec_mp3: i32 = 11;
    const codec_aac: i32 = 12;
    const codec_opus: i32 = 11;
    const codec_pcma: i32 = 13;
    const codec_pcmu: i32 = 14;

    media_type: i32;
    codec_type: i32;
    duration: i64;
    bitrate: i64;
    stream_id: i32;
    gops: list<i64>;
    # timebase
    timebase_num: i32;
    timebase_den: i32;
    a_desc: audio_description;
    v_desc: video_description;
}
