// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from media_comm.djinni

#include "NativeColor4f.h"  // my header
#include "Marshal.hpp"

namespace djinni_generated {

NativeColor4f::NativeColor4f() = default;

NativeColor4f::~NativeColor4f() = default;

auto NativeColor4f::fromCpp(JNIEnv* jniEnv, const CppType& c) -> ::djinni::LocalRef<JniType> {
    const auto& data = ::djinni::JniClass<NativeColor4f>::get();
    auto r = ::djinni::LocalRef<JniType>{jniEnv->NewObject(data.clazz.get(), data.jconstructor,
                                                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c.r)),
                                                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c.g)),
                                                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c.b)),
                                                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c.a)))};
    ::djinni::jniExceptionCheck(jniEnv);
    return r;
}

auto NativeColor4f::toCpp(JNIEnv* jniEnv, JniType j) -> CppType {
    ::djinni::JniLocalScope jscope(jniEnv, 5);
    assert(j != nullptr);
    const auto& data = ::djinni::JniClass<NativeColor4f>::get();
    return {::djinni::F32::toCpp(jniEnv, jniEnv->GetFloatField(j, data.field_mR)),
            ::djinni::F32::toCpp(jniEnv, jniEnv->GetFloatField(j, data.field_mG)),
            ::djinni::F32::toCpp(jniEnv, jniEnv->GetFloatField(j, data.field_mB)),
            ::djinni::F32::toCpp(jniEnv, jniEnv->GetFloatField(j, data.field_mA))};
}

}  // namespace djinni_generated
