// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from video_runloop.djinni

#pragma once

#include "djinni_support.hpp"
#include "video_runloop.h"

namespace djinni_generated {

class NativeVideoRunloop final : ::djinni::JniInterface<::QMedia::Api::VideoRunloop, NativeVideoRunloop> {
public:
    using CppType = std::shared_ptr<::QMedia::Api::VideoRunloop>;
    using CppOptType = std::shared_ptr<::QMedia::Api::VideoRunloop>;
    using JniType = jobject;

    using Boxed = NativeVideoRunloop;

    ~NativeVideoRunloop();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeVideoRunloop>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeVideoRunloop>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeVideoRunloop();
    friend ::djinni::JniClass<NativeVideoRunloop>;
    friend ::djinni::JniInterface<::QMedia::Api::VideoRunloop, NativeVideoRunloop>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::QMedia::Api::VideoRunloop
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void setVideoRender(const std::shared_ptr<::QMedia::Api::VideoRender> & render) override;
        bool start() override;
        void stop() override;
        void pause(bool isPause) override;
        void forceUpdate() override;

    private:
        friend ::djinni::JniInterface<::QMedia::Api::VideoRunloop, ::djinni_generated::NativeVideoRunloop>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/qmedia/editor/generated/VideoRunloop") };
    const jmethodID method_setVideoRender { ::djinni::jniGetMethodID(clazz.get(), "setVideoRender", "(Lcom/qmedia/editor/generated/VideoRender;)V") };
    const jmethodID method_start { ::djinni::jniGetMethodID(clazz.get(), "start", "()Z") };
    const jmethodID method_stop { ::djinni::jniGetMethodID(clazz.get(), "stop", "()V") };
    const jmethodID method_pause { ::djinni::jniGetMethodID(clazz.get(), "pause", "(Z)V") };
    const jmethodID method_forceUpdate { ::djinni::jniGetMethodID(clazz.get(), "forceUpdate", "()V") };
};

}  // namespace djinni_generated
