// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from audio_runloop.djinni

#pragma once

#include "audio_runloop.h"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeAudioRunloop final : ::djinni::JniInterface<::QMedia::Api::AudioRunloop, NativeAudioRunloop> {
public:
    using CppType = std::shared_ptr<::QMedia::Api::AudioRunloop>;
    using CppOptType = std::shared_ptr<::QMedia::Api::AudioRunloop>;
    using JniType = jobject;

    using Boxed = NativeAudioRunloop;

    ~NativeAudioRunloop();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeAudioRunloop>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeAudioRunloop>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeAudioRunloop();
    friend ::djinni::JniClass<NativeAudioRunloop>;
    friend ::djinni::JniInterface<::QMedia::Api::AudioRunloop, NativeAudioRunloop>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::QMedia::Api::AudioRunloop
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void setAudioRender(const std::shared_ptr<::QMedia::Api::AudioRender> & render) override;
        bool audioInit(const ::QMedia::Api::AudioDescription & desc) override;
        bool audioStart() override;
        void audioStop() override;
        void audioPause(bool bpause) override;
        void audioFlush() override;
        void setVolume(float volume) override;
        float getVolume() override;

    private:
        friend ::djinni::JniInterface<::QMedia::Api::AudioRunloop, ::djinni_generated::NativeAudioRunloop>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/qmedia/editor/generated/AudioRunloop") };
    const jmethodID method_setAudioRender { ::djinni::jniGetMethodID(clazz.get(), "setAudioRender", "(Lcom/qmedia/editor/generated/AudioRender;)V") };
    const jmethodID method_audioInit { ::djinni::jniGetMethodID(clazz.get(), "audioInit", "(Lcom/qmedia/editor/generated/AudioDescription;)Z") };
    const jmethodID method_audioStart { ::djinni::jniGetMethodID(clazz.get(), "audioStart", "()Z") };
    const jmethodID method_audioStop { ::djinni::jniGetMethodID(clazz.get(), "audioStop", "()V") };
    const jmethodID method_audioPause { ::djinni::jniGetMethodID(clazz.get(), "audioPause", "(Z)V") };
    const jmethodID method_audioFlush { ::djinni::jniGetMethodID(clazz.get(), "audioFlush", "()V") };
    const jmethodID method_setVolume { ::djinni::jniGetMethodID(clazz.get(), "setVolume", "(F)V") };
    const jmethodID method_getVolume { ::djinni::jniGetMethodID(clazz.get(), "getVolume", "()F") };
};

}  // namespace djinni_generated
