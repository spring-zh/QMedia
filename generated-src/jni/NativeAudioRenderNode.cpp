// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from media_node.djinni

#include "NativeAudioRenderNode.h"  // my header
#include "Marshal.hpp"

namespace djinni_generated {

NativeAudioRenderNode::NativeAudioRenderNode() : ::djinni::JniInterface<::QMedia::Api::AudioRenderNode, NativeAudioRenderNode>("com/qmedia/editor/generated/AudioRenderNode$CppProxy") {}

NativeAudioRenderNode::~NativeAudioRenderNode() = default;


CJNIEXPORT void JNICALL Java_com_qmedia_editor_generated_AudioRenderNode_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::QMedia::Api::AudioRenderNode>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_qmedia_editor_generated_AudioRenderNode_00024CppProxy_native_1setTempo(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jfloat j_tempo)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::QMedia::Api::AudioRenderNode>(nativeRef);
        ref->setTempo(::djinni::F32::toCpp(jniEnv, j_tempo));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_qmedia_editor_generated_AudioRenderNode_00024CppProxy_native_1setRate(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jfloat j_rate)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::QMedia::Api::AudioRenderNode>(nativeRef);
        ref->setRate(::djinni::F32::toCpp(jniEnv, j_rate));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_qmedia_editor_generated_AudioRenderNode_00024CppProxy_native_1setPitch(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jfloat j_pitch)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::QMedia::Api::AudioRenderNode>(nativeRef);
        ref->setPitch(::djinni::F32::toCpp(jniEnv, j_pitch));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_qmedia_editor_generated_AudioRenderNode_00024CppProxy_native_1setVolume(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jfloat j_volume)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::QMedia::Api::AudioRenderNode>(nativeRef);
        ref->setVolume(::djinni::F32::toCpp(jniEnv, j_volume));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
