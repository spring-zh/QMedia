// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from media_session.djinni

#pragma once

#include "djinni_support.hpp"
#include "editor_exporter_callback.h"

namespace djinni_generated {

class NativeEditorExporterCallback final : ::djinni::JniInterface<::QMedia::Api::EditorExporterCallback, NativeEditorExporterCallback> {
public:
    using CppType = std::shared_ptr<::QMedia::Api::EditorExporterCallback>;
    using CppOptType = std::shared_ptr<::QMedia::Api::EditorExporterCallback>;
    using JniType = jobject;

    using Boxed = NativeEditorExporterCallback;

    ~NativeEditorExporterCallback();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeEditorExporterCallback>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeEditorExporterCallback>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeEditorExporterCallback();
    friend ::djinni::JniClass<NativeEditorExporterCallback>;
    friend ::djinni::JniInterface<::QMedia::Api::EditorExporterCallback, NativeEditorExporterCallback>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::QMedia::Api::EditorExporterCallback
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void onStarted(int32_t code) override;
        void onStoped() override;
        void onProgressUpdated(int64_t time_ms) override;
        void onCanceled() override;
        void onCompleted(int32_t code) override;
        void onEvent(int32_t eventid, const std::unordered_map<std::string, std::string> & msg) override;

    private:
        friend ::djinni::JniInterface<::QMedia::Api::EditorExporterCallback, ::djinni_generated::NativeEditorExporterCallback>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("com/qmedia/editor/generated/EditorExporterCallback") };
    const jmethodID method_onStarted { ::djinni::jniGetMethodID(clazz.get(), "onStarted", "(I)V") };
    const jmethodID method_onStoped { ::djinni::jniGetMethodID(clazz.get(), "onStoped", "()V") };
    const jmethodID method_onProgressUpdated { ::djinni::jniGetMethodID(clazz.get(), "onProgressUpdated", "(J)V") };
    const jmethodID method_onCanceled { ::djinni::jniGetMethodID(clazz.get(), "onCanceled", "()V") };
    const jmethodID method_onCompleted { ::djinni::jniGetMethodID(clazz.get(), "onCompleted", "(I)V") };
    const jmethodID method_onEvent { ::djinni::jniGetMethodID(clazz.get(), "onEvent", "(ILjava/util/HashMap;)V") };
};

}  // namespace djinni_generated
