// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from media_session.djinni

#include "NativeMediaSessionInternal.h"  // my header
#include "Marshal.hpp"
#include "NativeAudioRender.h"
#include "NativeAudioRunloop.h"
#include "NativeMediaRange.h"
#include "NativeMediaSegment.h"
#include "NativeSize.h"
#include "NativeVec4f.h"
#include "NativeVideoRender.h"
#include "NativeVideoRunloop.h"

namespace djinni_generated {

NativeMediaSessionInternal::NativeMediaSessionInternal() : ::djinni::JniInterface<::QMedia::Api::MediaSessionInternal, NativeMediaSessionInternal>("com/qmedia/editor/generated/MediaSessionInternal$CppProxy") {}

NativeMediaSessionInternal::~NativeMediaSessionInternal() = default;


CJNIEXPORT void JNICALL Java_com_qmedia_editor_generated_MediaSessionInternal_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::QMedia::Api::MediaSessionInternal>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_qmedia_editor_generated_MediaSessionInternal_00024CppProxy_native_1cresteMediaSegment(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_filename, jint j_flag)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::QMedia::Api::MediaSessionInternal>(nativeRef);
        auto r = ref->cresteMediaSegment(::djinni::String::toCpp(jniEnv, j_filename),
                                         ::djinni::I32::toCpp(jniEnv, j_flag));
        return ::djinni::release(::djinni_generated::NativeMediaSegment::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_qmedia_editor_generated_MediaSessionInternal_00024CppProxy_native_1addMediaSegment(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_segment)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::QMedia::Api::MediaSessionInternal>(nativeRef);
        auto r = ref->addMediaSegment(::djinni_generated::NativeMediaSegment::toCpp(jniEnv, j_segment));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_qmedia_editor_generated_MediaSessionInternal_00024CppProxy_native_1removeMediaSegment(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_segment)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::QMedia::Api::MediaSessionInternal>(nativeRef);
        auto r = ref->removeMediaSegment(::djinni_generated::NativeMediaSegment::toCpp(jniEnv, j_segment));
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_qmedia_editor_generated_MediaSessionInternal_00024CppProxy_native_1getSegments(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::QMedia::Api::MediaSessionInternal>(nativeRef);
        auto r = ref->getSegments();
        return ::djinni::release(::djinni::List<::djinni_generated::NativeMediaSegment>::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_qmedia_editor_generated_MediaSessionInternal_00024CppProxy_native_1getTotalTimeRange(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::QMedia::Api::MediaSessionInternal>(nativeRef);
        auto r = ref->getTotalTimeRange();
        return ::djinni::release(::djinni_generated::NativeMediaRange::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_qmedia_editor_generated_MediaSessionInternal_00024CppProxy_native_1getVideoRender(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::QMedia::Api::MediaSessionInternal>(nativeRef);
        auto r = ref->getVideoRender();
        return ::djinni::release(::djinni_generated::NativeVideoRender::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_qmedia_editor_generated_MediaSessionInternal_00024CppProxy_native_1getAudioRender(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::QMedia::Api::MediaSessionInternal>(nativeRef);
        auto r = ref->getAudioRender();
        return ::djinni::release(::djinni_generated::NativeAudioRender::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_com_qmedia_editor_generated_MediaSessionInternal_00024CppProxy_native_1setAudioRunLoop(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_audioLoop)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::QMedia::Api::MediaSessionInternal>(nativeRef);
        ref->setAudioRunLoop(::djinni_generated::NativeAudioRunloop::toCpp(jniEnv, j_audioLoop));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_qmedia_editor_generated_MediaSessionInternal_00024CppProxy_native_1setVideoRunLoop(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_videoLoop)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::QMedia::Api::MediaSessionInternal>(nativeRef);
        ref->setVideoRunLoop(::djinni_generated::NativeVideoRunloop::toCpp(jniEnv, j_videoLoop));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_qmedia_editor_generated_MediaSessionInternal_00024CppProxy_native_1setDisplayLayerSize(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_size)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::QMedia::Api::MediaSessionInternal>(nativeRef);
        ref->setDisplayLayerSize(::djinni_generated::NativeSize::toCpp(jniEnv, j_size));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_qmedia_editor_generated_MediaSessionInternal_00024CppProxy_native_1getDisplayLayerSize(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::QMedia::Api::MediaSessionInternal>(nativeRef);
        auto r = ref->getDisplayLayerSize();
        return ::djinni::release(::djinni_generated::NativeSize::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_com_qmedia_editor_generated_MediaSessionInternal_00024CppProxy_native_1setBkColor(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_color)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::QMedia::Api::MediaSessionInternal>(nativeRef);
        ref->setBkColor(::djinni_generated::NativeVec4f::toCpp(jniEnv, j_color));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_qmedia_editor_generated_MediaSessionInternal_00024CppProxy_native_1getBkColor(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::QMedia::Api::MediaSessionInternal>(nativeRef);
        auto r = ref->getBkColor();
        return ::djinni::release(::djinni_generated::NativeVec4f::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_com_qmedia_editor_generated_MediaSessionInternal_00024CppProxy_native_1prepare(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::QMedia::Api::MediaSessionInternal>(nativeRef);
        ref->prepare();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_qmedia_editor_generated_MediaSessionInternal_00024CppProxy_native_1start(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::QMedia::Api::MediaSessionInternal>(nativeRef);
        ref->start();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_qmedia_editor_generated_MediaSessionInternal_00024CppProxy_native_1stop(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::QMedia::Api::MediaSessionInternal>(nativeRef);
        ref->stop();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
