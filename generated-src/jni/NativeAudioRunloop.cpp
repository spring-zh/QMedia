// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from audio_runloop.djinni

#include "NativeAudioRunloop.h"  // my header
#include "Marshal.hpp"
#include "NativeAudioDescription.h"
#include "NativeAudioRender.h"

namespace djinni_generated {

NativeAudioRunloop::NativeAudioRunloop() : ::djinni::JniInterface<::QMedia::Api::AudioRunloop, NativeAudioRunloop>() {}

NativeAudioRunloop::~NativeAudioRunloop() = default;

NativeAudioRunloop::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeAudioRunloop::JavaProxy::~JavaProxy() = default;

void NativeAudioRunloop::JavaProxy::setAudioRender(const std::shared_ptr<::QMedia::Api::AudioRender> & c_render) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeAudioRunloop>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_setAudioRender,
                           ::djinni::get(::djinni_generated::NativeAudioRender::fromCpp(jniEnv, c_render)));
    ::djinni::jniExceptionCheck(jniEnv);
}
bool NativeAudioRunloop::JavaProxy::audioInit(const ::QMedia::Api::AudioDescription & c_desc) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeAudioRunloop>::get();
    auto jret = jniEnv->CallBooleanMethod(Handle::get().get(), data.method_audioInit,
                                          ::djinni::get(::djinni_generated::NativeAudioDescription::fromCpp(jniEnv, c_desc)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Bool::toCpp(jniEnv, jret);
}
bool NativeAudioRunloop::JavaProxy::audioStart() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeAudioRunloop>::get();
    auto jret = jniEnv->CallBooleanMethod(Handle::get().get(), data.method_audioStart);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Bool::toCpp(jniEnv, jret);
}
void NativeAudioRunloop::JavaProxy::audioStop() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeAudioRunloop>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_audioStop);
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeAudioRunloop::JavaProxy::audioPause(bool c_bpause) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeAudioRunloop>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_audioPause,
                           ::djinni::get(::djinni::Bool::fromCpp(jniEnv, c_bpause)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeAudioRunloop::JavaProxy::audioFlush() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeAudioRunloop>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_audioFlush);
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeAudioRunloop::JavaProxy::setVolume(float c_volume) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeAudioRunloop>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_setVolume,
                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c_volume)));
    ::djinni::jniExceptionCheck(jniEnv);
}
float NativeAudioRunloop::JavaProxy::getVolume() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeAudioRunloop>::get();
    auto jret = jniEnv->CallFloatMethod(Handle::get().get(), data.method_getVolume);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::F32::toCpp(jniEnv, jret);
}

}  // namespace djinni_generated
