// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from audio_runloop.djinni

#include "NativeAudioRender.h"  // my header
#include "Marshal.hpp"

namespace djinni_generated {

NativeAudioRender::NativeAudioRender() : ::djinni::JniInterface<::QMedia::Api::AudioRender, NativeAudioRender>("com/qmedia/editor/generated/AudioRender$CppProxy") {}

NativeAudioRender::~NativeAudioRender() = default;


CJNIEXPORT void JNICALL Java_com_qmedia_editor_generated_AudioRender_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::QMedia::Api::AudioRender>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jint JNICALL Java_com_qmedia_editor_generated_AudioRender_00024CppProxy_native_1OnPlayBuffer(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_buffer, jint j_sizeNeed, jlong j_wantTime)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::QMedia::Api::AudioRender>(nativeRef);
        auto r = ref->OnPlayBuffer(::djinni::Object::toCpp(jniEnv, j_buffer),
                                   ::djinni::I32::toCpp(jniEnv, j_sizeNeed),
                                   ::djinni::I64::toCpp(jniEnv, j_wantTime));
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
