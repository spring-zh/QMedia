// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from media_config.djinni

#include "NativeVideoEncodeOption.h"  // my header
#include "Marshal.hpp"

namespace djinni_generated {

NativeVideoEncodeOption::NativeVideoEncodeOption() = default;

NativeVideoEncodeOption::~NativeVideoEncodeOption() = default;

auto NativeVideoEncodeOption::fromCpp(JNIEnv* jniEnv, const CppType& c) -> ::djinni::LocalRef<JniType> {
    const auto& data = ::djinni::JniClass<NativeVideoEncodeOption>::get();
    auto r = ::djinni::LocalRef<JniType>{jniEnv->NewObject(data.clazz.get(), data.jconstructor,
                                                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c.codectype)),
                                                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c.width)),
                                                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c.height)),
                                                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c.bitrate)),
                                                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c.framerate)),
                                                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c.gop)),
                                                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c.profile)),
                                                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c.level)),
                                                           ::djinni::get(::djinni::Optional<std::experimental::optional, ::djinni::String>::fromCpp(jniEnv, c.ext)))};
    ::djinni::jniExceptionCheck(jniEnv);
    return r;
}

auto NativeVideoEncodeOption::toCpp(JNIEnv* jniEnv, JniType j) -> CppType {
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    assert(j != nullptr);
    const auto& data = ::djinni::JniClass<NativeVideoEncodeOption>::get();
    return {::djinni::I32::toCpp(jniEnv, jniEnv->GetIntField(j, data.field_mCodectype)),
            ::djinni::I32::toCpp(jniEnv, jniEnv->GetIntField(j, data.field_mWidth)),
            ::djinni::I32::toCpp(jniEnv, jniEnv->GetIntField(j, data.field_mHeight)),
            ::djinni::I32::toCpp(jniEnv, jniEnv->GetIntField(j, data.field_mBitrate)),
            ::djinni::I32::toCpp(jniEnv, jniEnv->GetIntField(j, data.field_mFramerate)),
            ::djinni::I32::toCpp(jniEnv, jniEnv->GetIntField(j, data.field_mGop)),
            ::djinni::I32::toCpp(jniEnv, jniEnv->GetIntField(j, data.field_mProfile)),
            ::djinni::I32::toCpp(jniEnv, jniEnv->GetIntField(j, data.field_mLevel)),
            ::djinni::Optional<std::experimental::optional, ::djinni::String>::toCpp(jniEnv, (jstring)jniEnv->GetObjectField(j, data.field_mExt))};
}

}  // namespace djinni_generated
