// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from media_segment.djinni

#import "QMediaSegment+Private.h"
#import "QMediaSegment.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "QMediaStreamInfo+Private.h"
#import "QTimeRange+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface QMediaSegment ()

- (id)initWithCpp:(const std::shared_ptr<::QMedia::Api::MediaSegment>&)cppRef;

@end

@implementation QMediaSegment {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::QMedia::Api::MediaSegment>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::QMedia::Api::MediaSegment>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nonnull NSArray<QMediaStreamInfo *> *)getMediaStreamInfo {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getMediaStreamInfo();
        return ::djinni::List<::djinni_generated::MediaStreamInfo>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)enable:(int32_t)streamId {
    try {
        _cppRefHandle.get()->enable(::djinni::I32::toCpp(streamId));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getFileName {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getFileName();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setTimescale:(float)timeScale {
    try {
        _cppRefHandle.get()->setTimescale(::djinni::F32::toCpp(timeScale));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)getTimescale {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getTimescale();
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setSourceRange:(nonnull QTimeRange *)range {
    try {
        _cppRefHandle.get()->setSourceRange(::djinni_generated::TimeRange::toCpp(range));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull QTimeRange *)getSourceRange {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getSourceRange();
        return ::djinni_generated::TimeRange::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setDisplayRange:(nonnull QTimeRange *)range {
    try {
        _cppRefHandle.get()->setDisplayRange(::djinni_generated::TimeRange::toCpp(range));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull QTimeRange *)getDisplayRange {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getDisplayRange();
        return ::djinni_generated::TimeRange::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int64_t)getMediaDuration {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getMediaDuration();
        return ::djinni::I64::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto MediaSegment::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto MediaSegment::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<QMediaSegment>(cpp);
}

}  // namespace djinni_generated

@end
