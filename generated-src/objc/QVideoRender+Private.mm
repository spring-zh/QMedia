// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from video_runloop.djinni

#import "QVideoRender+Private.h"
#import "QVideoRender.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface QVideoRender ()

- (id)initWithCpp:(const std::shared_ptr<::QMedia::Api::VideoRender>&)cppRef;

@end

@implementation QVideoRender {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::QMedia::Api::VideoRender>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::QMedia::Api::VideoRender>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)setDisplayMode:(int32_t)mode
                 flipV:(BOOL)flipV {
    try {
        _cppRefHandle.get()->setDisplayMode(::djinni::I32::toCpp(mode),
                                            ::djinni::Bool::toCpp(flipV));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onViewSizeChange:(int32_t)width
                  height:(int32_t)height {
    try {
        _cppRefHandle.get()->onViewSizeChange(::djinni::I32::toCpp(width),
                                              ::djinni::I32::toCpp(height));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onViewDestroy {
    try {
        _cppRefHandle.get()->onViewDestroy();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)onDraw:(int64_t)timeMs
     noDisplay:(BOOL)noDisplay {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->onDraw(::djinni::I64::toCpp(timeMs),
                                                          ::djinni::Bool::toCpp(noDisplay));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)readRGBA:(nonnull id)buffer
           width:(int32_t)width
          height:(int32_t)height
          format:(int32_t)format {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->readRGBA(::djinni::Object::toCpp(buffer),
                                                            ::djinni::I32::toCpp(width),
                                                            ::djinni::I32::toCpp(height),
                                                            ::djinni::I32::toCpp(format));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto VideoRender::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto VideoRender::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<QVideoRender>(cpp);
}

}  // namespace djinni_generated

@end
