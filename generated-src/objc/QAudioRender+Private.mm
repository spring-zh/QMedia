// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from audio_runloop.djinni

#import "QAudioRender+Private.h"
#import "QAudioRender.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface QAudioRender ()

- (id)initWithCpp:(const std::shared_ptr<::QMedia::Api::AudioRender>&)cppRef;

@end

@implementation QAudioRender {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::QMedia::Api::AudioRender>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::QMedia::Api::AudioRender>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (int32_t)OnPlayBuffer:(nonnull id)buffer
               sizeNeed:(int32_t)sizeNeed
               wantTime:(int64_t)wantTime {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->OnPlayBuffer(::djinni::Object::toCpp(buffer),
                                                                ::djinni::I32::toCpp(sizeNeed),
                                                                ::djinni::I64::toCpp(wantTime));
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto AudioRender::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto AudioRender::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<QAudioRender>(cpp);
}

}  // namespace djinni_generated

@end
