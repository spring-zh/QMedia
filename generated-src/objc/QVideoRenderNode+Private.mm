// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from media_node.djinni

#import "QVideoRenderNode+Private.h"
#import "QVideoRenderNode.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "QAnimator+Private.h"
#import "QBlendfunc+Private.h"
#import "QColor4f+Private.h"
#import "QPoint+Private.h"
#import "QRect4f+Private.h"
#import "QSize+Private.h"
#import "QVec3f+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface QVideoRenderNode ()

- (id)initWithCpp:(const std::shared_ptr<::QMedia::Api::VideoRenderNode>&)cppRef;

@end

@implementation QVideoRenderNode {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::QMedia::Api::VideoRenderNode>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::QMedia::Api::VideoRenderNode>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)setVisible:(BOOL)visible {
    try {
        _cppRefHandle.get()->setVisible(::djinni::Bool::toCpp(visible));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)getVisible {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getVisible();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setPosition:(nonnull QPoint *)position {
    try {
        _cppRefHandle.get()->setPosition(::djinni_generated::Point::toCpp(position));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull QPoint *)getPosition {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getPosition();
        return ::djinni_generated::Point::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setPositionZ:(int32_t)positionz {
    try {
        _cppRefHandle.get()->setPositionZ(::djinni::I32::toCpp(positionz));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getPositionZ {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getPositionZ();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setScaleX:(float)scalex {
    try {
        _cppRefHandle.get()->setScaleX(::djinni::F32::toCpp(scalex));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)getScaleX {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getScaleX();
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setScaleY:(float)scaley {
    try {
        _cppRefHandle.get()->setScaleY(::djinni::F32::toCpp(scaley));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)getScaleY {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getScaleY();
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setScaleZ:(float)scalez {
    try {
        _cppRefHandle.get()->setScaleZ(::djinni::F32::toCpp(scalez));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)getScaleZ {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getScaleZ();
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setContentSize:(nonnull QSize *)contentSize {
    try {
        _cppRefHandle.get()->setContentSize(::djinni_generated::Size::toCpp(contentSize));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull QSize *)getContentSize {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getContentSize();
        return ::djinni_generated::Size::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setRotation:(int32_t)rotation {
    try {
        _cppRefHandle.get()->setRotation(::djinni::I32::toCpp(rotation));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getRotation {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getRotation();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setRotation3d:(nonnull QVec3f *)rotation3d {
    try {
        _cppRefHandle.get()->setRotation3d(::djinni_generated::Vec3f::toCpp(rotation3d));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull QVec3f *)getRotation3d {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getRotation3d();
        return ::djinni_generated::Vec3f::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setAnchorPoint:(nonnull QPoint *)anchorPoint {
    try {
        _cppRefHandle.get()->setAnchorPoint(::djinni_generated::Point::toCpp(anchorPoint));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull QPoint *)getAnchorPoint {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getAnchorPoint();
        return ::djinni_generated::Point::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setColor4F:(nonnull QColor4f *)color {
    try {
        _cppRefHandle.get()->setColor4F(::djinni_generated::Color4f::toCpp(color));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull QColor4f *)getColor4F {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getColor4F();
        return ::djinni_generated::Color4f::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setAlpha:(float)alpha {
    try {
        _cppRefHandle.get()->setAlpha(::djinni::F32::toCpp(alpha));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)getAlpha {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getAlpha();
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setBlendFunc:(nonnull QBlendfunc *)bf {
    try {
        _cppRefHandle.get()->setBlendFunc(::djinni_generated::Blendfunc::toCpp(bf));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull QBlendfunc *)getBlendFunc {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getBlendFunc();
        return ::djinni_generated::Blendfunc::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setCrop:(nonnull QRect4f *)crop {
    try {
        _cppRefHandle.get()->setCrop(::djinni_generated::Rect4f::toCpp(crop));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull QRect4f *)getCrop {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getCrop();
        return ::djinni_generated::Rect4f::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<QAnimator *> *)getAnimators {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getAnimators();
        return ::djinni::List<::djinni_generated::Animator>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)addAnimator:(nonnull QAnimator *)animator {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->addAnimator(::djinni_generated::Animator::toCpp(animator));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)removeAnimator:(nonnull QAnimator *)animator {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->removeAnimator(::djinni_generated::Animator::toCpp(animator));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto VideoRenderNode::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto VideoRenderNode::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<QVideoRenderNode>(cpp);
}

}  // namespace djinni_generated

@end
