// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from audio_runloop.djinni

#import "QAudioRunloop+Private.h"
#import "QAudioRunloop.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "QAudioDescription+Private.h"
#import "QAudioRender+Private.h"
#include <stdexcept>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

namespace djinni_generated {

class AudioRunloop::ObjcProxy final
: public ::QMedia::Api::AudioRunloop
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::AudioRunloop;
public:
    using ObjcProxyBase::ObjcProxyBase;
    void setAudioRender(const std::shared_ptr<::QMedia::Api::AudioRender> & c_render) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() setAudioRender:(::djinni_generated::AudioRender::fromCpp(c_render))];
        }
    }
    bool audioInit(const ::QMedia::Api::AudioDescription & c_desc) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() audioInit:(::djinni_generated::AudioDescription::fromCpp(c_desc))];
            return ::djinni::Bool::toCpp(objcpp_result_);
        }
    }
    bool audioStart() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() audioStart];
            return ::djinni::Bool::toCpp(objcpp_result_);
        }
    }
    void audioStop() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() audioStop];
        }
    }
    void audioPause(bool c_bpause) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() audioPause:(::djinni::Bool::fromCpp(c_bpause))];
        }
    }
    void audioFlush() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() audioFlush];
        }
    }
    void setVolume(float c_volume) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() setVolume:(::djinni::F32::fromCpp(c_volume))];
        }
    }
    float getVolume() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getVolume];
            return ::djinni::F32::toCpp(objcpp_result_);
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto AudioRunloop::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto AudioRunloop::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return dynamic_cast<ObjcProxy&>(*cpp).djinni_private_get_proxied_objc_object();
}

}  // namespace djinni_generated
