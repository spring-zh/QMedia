// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from media_node.djinni

#import "QAudioRenderNode+Private.h"
#import "QAudioRenderNode.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface QAudioRenderNode ()

- (id)initWithCpp:(const std::shared_ptr<::QMedia::Api::AudioRenderNode>&)cppRef;

@end

@implementation QAudioRenderNode {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::QMedia::Api::AudioRenderNode>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::QMedia::Api::AudioRenderNode>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)setTempo:(float)tempo {
    try {
        _cppRefHandle.get()->setTempo(::djinni::F32::toCpp(tempo));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setRate:(float)rate {
    try {
        _cppRefHandle.get()->setRate(::djinni::F32::toCpp(rate));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setPitch:(float)pitch {
    try {
        _cppRefHandle.get()->setPitch(::djinni::F32::toCpp(pitch));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setVolume:(float)volume {
    try {
        _cppRefHandle.get()->setVolume(::djinni::F32::toCpp(volume));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto AudioRenderNode::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto AudioRenderNode::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<QAudioRenderNode>(cpp);
}

}  // namespace djinni_generated

@end
