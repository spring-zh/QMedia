// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from media_node.djinni

package com.qmedia.editor.generated;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public interface VideoRenderNode {
    public void setVisible(boolean visible);

    public void setAlpha(float alpha);

    public void setCrop(@NonNull Vec4f crop);

    public void setContentSize(@NonNull Size contentSize);

    public void setAnchorPoint(@NonNull Point anchorPoint);

    public void setPosition(@NonNull Point position);

    public void setPositionZ(int positionz);

    public void setRotation(int rotation);

    public void setRotation3d(@NonNull Vec4f rotation3d);

    public void setScaleX(float scalex);

    public void setScaleY(float scaley);

    public void setScaleZ(float scalez);

    @NonNull
    public ArrayList<Animator> getAnimators();

    public boolean addAnimator(@NonNull Animator animator);

    public boolean removeAnimator(@NonNull Animator animator);

    static final class CppProxy implements VideoRenderNode
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void setVisible(boolean visible)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setVisible(this.nativeRef, visible);
        }
        private native void native_setVisible(long _nativeRef, boolean visible);

        @Override
        public void setAlpha(float alpha)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setAlpha(this.nativeRef, alpha);
        }
        private native void native_setAlpha(long _nativeRef, float alpha);

        @Override
        public void setCrop(Vec4f crop)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setCrop(this.nativeRef, crop);
        }
        private native void native_setCrop(long _nativeRef, Vec4f crop);

        @Override
        public void setContentSize(Size contentSize)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setContentSize(this.nativeRef, contentSize);
        }
        private native void native_setContentSize(long _nativeRef, Size contentSize);

        @Override
        public void setAnchorPoint(Point anchorPoint)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setAnchorPoint(this.nativeRef, anchorPoint);
        }
        private native void native_setAnchorPoint(long _nativeRef, Point anchorPoint);

        @Override
        public void setPosition(Point position)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setPosition(this.nativeRef, position);
        }
        private native void native_setPosition(long _nativeRef, Point position);

        @Override
        public void setPositionZ(int positionz)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setPositionZ(this.nativeRef, positionz);
        }
        private native void native_setPositionZ(long _nativeRef, int positionz);

        @Override
        public void setRotation(int rotation)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setRotation(this.nativeRef, rotation);
        }
        private native void native_setRotation(long _nativeRef, int rotation);

        @Override
        public void setRotation3d(Vec4f rotation3d)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setRotation3d(this.nativeRef, rotation3d);
        }
        private native void native_setRotation3d(long _nativeRef, Vec4f rotation3d);

        @Override
        public void setScaleX(float scalex)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setScaleX(this.nativeRef, scalex);
        }
        private native void native_setScaleX(long _nativeRef, float scalex);

        @Override
        public void setScaleY(float scaley)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setScaleY(this.nativeRef, scaley);
        }
        private native void native_setScaleY(long _nativeRef, float scaley);

        @Override
        public void setScaleZ(float scalez)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setScaleZ(this.nativeRef, scalez);
        }
        private native void native_setScaleZ(long _nativeRef, float scalez);

        @Override
        public ArrayList<Animator> getAnimators()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getAnimators(this.nativeRef);
        }
        private native ArrayList<Animator> native_getAnimators(long _nativeRef);

        @Override
        public boolean addAnimator(Animator animator)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_addAnimator(this.nativeRef, animator);
        }
        private native boolean native_addAnimator(long _nativeRef, Animator animator);

        @Override
        public boolean removeAnimator(Animator animator)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_removeAnimator(this.nativeRef, animator);
        }
        private native boolean native_removeAnimator(long _nativeRef, Animator animator);
    }
}
