// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from media_segment.djinni

package com.qmedia.editor.generated;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public interface MediaSegment {
    @NonNull
    public ArrayList<MediaStreamInfo> getMediaStreamInfo();

    public void enable(int streamId);

    @NonNull
    public String getFileName();

    public void setTimescale(float timeScale);

    public float getTimescale();

    public void setSourceRange(@NonNull TimeRange range);

    @NonNull
    public TimeRange getSourceRange();

    public void setDisplayRange(@NonNull TimeRange range);

    @NonNull
    public TimeRange getDisplayRange();

    public long getMediaDuration();

    static final class CppProxy implements MediaSegment
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public ArrayList<MediaStreamInfo> getMediaStreamInfo()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getMediaStreamInfo(this.nativeRef);
        }
        private native ArrayList<MediaStreamInfo> native_getMediaStreamInfo(long _nativeRef);

        @Override
        public void enable(int streamId)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_enable(this.nativeRef, streamId);
        }
        private native void native_enable(long _nativeRef, int streamId);

        @Override
        public String getFileName()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getFileName(this.nativeRef);
        }
        private native String native_getFileName(long _nativeRef);

        @Override
        public void setTimescale(float timeScale)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setTimescale(this.nativeRef, timeScale);
        }
        private native void native_setTimescale(long _nativeRef, float timeScale);

        @Override
        public float getTimescale()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getTimescale(this.nativeRef);
        }
        private native float native_getTimescale(long _nativeRef);

        @Override
        public void setSourceRange(TimeRange range)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setSourceRange(this.nativeRef, range);
        }
        private native void native_setSourceRange(long _nativeRef, TimeRange range);

        @Override
        public TimeRange getSourceRange()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getSourceRange(this.nativeRef);
        }
        private native TimeRange native_getSourceRange(long _nativeRef);

        @Override
        public void setDisplayRange(TimeRange range)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setDisplayRange(this.nativeRef, range);
        }
        private native void native_setDisplayRange(long _nativeRef, TimeRange range);

        @Override
        public TimeRange getDisplayRange()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getDisplayRange(this.nativeRef);
        }
        private native TimeRange native_getDisplayRange(long _nativeRef);

        @Override
        public long getMediaDuration()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getMediaDuration(this.nativeRef);
        }
        private native long native_getMediaDuration(long _nativeRef);
    }
}
