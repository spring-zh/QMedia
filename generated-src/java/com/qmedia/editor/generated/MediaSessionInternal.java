// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from media_session.djinni

package com.qmedia.editor.generated;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import java.util.concurrent.atomic.AtomicBoolean;

public interface MediaSessionInternal {
    @Nullable
    public MediaSegment cresteMediaSegment(@NonNull String filename, int mode);

    public boolean addMediaSegment(@Nullable MediaSegment segment);

    public boolean removeMediaSegment(@Nullable MediaSegment segment);

    @NonNull
    public TimeRange getTotalTimeRange();

    public void setDisplayLayerSize(@NonNull Size size);

    @NonNull
    public Size getDisplayLayerSize();

    public void setBkColor(@NonNull Vec4 color);

    @NonNull
    public Vec4 getBkColor();

    /** control */
    public void start();

    public void stop();

    public void pause();

    public void resume();

    public void seek(long timeMs, int flag);

    public long getPosition();

    static final class CppProxy implements MediaSessionInternal
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public MediaSegment cresteMediaSegment(String filename, int mode)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_cresteMediaSegment(this.nativeRef, filename, mode);
        }
        private native MediaSegment native_cresteMediaSegment(long _nativeRef, String filename, int mode);

        @Override
        public boolean addMediaSegment(MediaSegment segment)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_addMediaSegment(this.nativeRef, segment);
        }
        private native boolean native_addMediaSegment(long _nativeRef, MediaSegment segment);

        @Override
        public boolean removeMediaSegment(MediaSegment segment)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_removeMediaSegment(this.nativeRef, segment);
        }
        private native boolean native_removeMediaSegment(long _nativeRef, MediaSegment segment);

        @Override
        public TimeRange getTotalTimeRange()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getTotalTimeRange(this.nativeRef);
        }
        private native TimeRange native_getTotalTimeRange(long _nativeRef);

        @Override
        public void setDisplayLayerSize(Size size)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setDisplayLayerSize(this.nativeRef, size);
        }
        private native void native_setDisplayLayerSize(long _nativeRef, Size size);

        @Override
        public Size getDisplayLayerSize()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getDisplayLayerSize(this.nativeRef);
        }
        private native Size native_getDisplayLayerSize(long _nativeRef);

        @Override
        public void setBkColor(Vec4 color)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setBkColor(this.nativeRef, color);
        }
        private native void native_setBkColor(long _nativeRef, Vec4 color);

        @Override
        public Vec4 getBkColor()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getBkColor(this.nativeRef);
        }
        private native Vec4 native_getBkColor(long _nativeRef);

        @Override
        public void start()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_start(this.nativeRef);
        }
        private native void native_start(long _nativeRef);

        @Override
        public void stop()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_stop(this.nativeRef);
        }
        private native void native_stop(long _nativeRef);

        @Override
        public void pause()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_pause(this.nativeRef);
        }
        private native void native_pause(long _nativeRef);

        @Override
        public void resume()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_resume(this.nativeRef);
        }
        private native void native_resume(long _nativeRef);

        @Override
        public void seek(long timeMs, int flag)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_seek(this.nativeRef, timeMs, flag);
        }
        private native void native_seek(long _nativeRef, long timeMs, int flag);

        @Override
        public long getPosition()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getPosition(this.nativeRef);
        }
        private native long native_getPosition(long _nativeRef);
    }
}
