// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from media_node.djinni

package com.qmedia.editor.generated;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import java.util.concurrent.atomic.AtomicBoolean;

public interface AudioRenderNode {
    public void setTempo(float tempo);

    public void setRate(float rate);

    public void setPitch(float pitch);

    public void setVolume(float volume);

    static final class CppProxy implements AudioRenderNode
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void setTempo(float tempo)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setTempo(this.nativeRef, tempo);
        }
        private native void native_setTempo(long _nativeRef, float tempo);

        @Override
        public void setRate(float rate)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setRate(this.nativeRef, rate);
        }
        private native void native_setRate(long _nativeRef, float rate);

        @Override
        public void setPitch(float pitch)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setPitch(this.nativeRef, pitch);
        }
        private native void native_setPitch(long _nativeRef, float pitch);

        @Override
        public void setVolume(float volume)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setVolume(this.nativeRef, volume);
        }
        private native void native_setVolume(long _nativeRef, float volume);
    }
}
