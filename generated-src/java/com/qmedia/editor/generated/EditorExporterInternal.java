// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from media_session.djinni

package com.qmedia.editor.generated;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import java.util.concurrent.atomic.AtomicBoolean;

public interface EditorExporterInternal {
    /** error code */
    int E_STATE = -3;

    int E_SYSTEM = -2;

    int UNKNOW = -1;

    int OK = 0;

    @Nullable
    public MediaSessionInternal getSession();

    public void setCallback(@Nullable EditorExporterCallback callback);

    public long getPosition();

    public void cancel();

    static final class CppProxy implements EditorExporterInternal
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public MediaSessionInternal getSession()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getSession(this.nativeRef);
        }
        private native MediaSessionInternal native_getSession(long _nativeRef);

        @Override
        public void setCallback(EditorExporterCallback callback)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setCallback(this.nativeRef, callback);
        }
        private native void native_setCallback(long _nativeRef, EditorExporterCallback callback);

        @Override
        public long getPosition()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getPosition(this.nativeRef);
        }
        private native long native_getPosition(long _nativeRef);

        @Override
        public void cancel()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_cancel(this.nativeRef);
        }
        private native void native_cancel(long _nativeRef);
    }
}
