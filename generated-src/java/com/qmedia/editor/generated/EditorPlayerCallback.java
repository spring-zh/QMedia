// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from media_session.djinni

package com.qmedia.editor.generated;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import java.util.concurrent.atomic.AtomicBoolean;

public interface EditorPlayerCallback {
    public void onStarted(int code);

    public void onStoped(int code);

    public void onSeekTo(long timeMs);

    public void onProgressUpdated(long timeMs);

    public void onPlayerStateChanged(int newState, int oldState);

    public void onCompleted();

    static final class CppProxy implements EditorPlayerCallback
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void onStarted(int code)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onStarted(this.nativeRef, code);
        }
        private native void native_onStarted(long _nativeRef, int code);

        @Override
        public void onStoped(int code)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onStoped(this.nativeRef, code);
        }
        private native void native_onStoped(long _nativeRef, int code);

        @Override
        public void onSeekTo(long timeMs)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onSeekTo(this.nativeRef, timeMs);
        }
        private native void native_onSeekTo(long _nativeRef, long timeMs);

        @Override
        public void onProgressUpdated(long timeMs)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onProgressUpdated(this.nativeRef, timeMs);
        }
        private native void native_onProgressUpdated(long _nativeRef, long timeMs);

        @Override
        public void onPlayerStateChanged(int newState, int oldState)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onPlayerStateChanged(this.nativeRef, newState, oldState);
        }
        private native void native_onPlayerStateChanged(long _nativeRef, int newState, int oldState);

        @Override
        public void onCompleted()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onCompleted(this.nativeRef);
        }
        private native void native_onCompleted(long _nativeRef);
    }
}
