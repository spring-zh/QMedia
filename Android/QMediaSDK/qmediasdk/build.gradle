apply plugin: 'com.android.library'

def SdkVersionName = "1.5"

android {
//    if (isDebugMode()){
//        publishNonDefault  true
//    }
    compileSdkVersion 25
    buildToolsVersion "27.0.3"

    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 22
        //renderscriptTargetApi 18
        //renderscriptSupportModeEnabled true
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        ndk {
            // Specifies the ABI configurations of your native
            // libraries Gradle should build and package with your APK.
            abiFilters "armeabi-v7a","arm64-v8a"
        }

        externalNativeBuild {
            cmake {
                arguments '-DANDROID_PLATFORM=android-18',
                        "-DANDROID_ARM_NEON=TRUE" ,
                        //"-DANDROID_TOOLCHAIN=gcc",
                        '-DANDROID_STL=c++_static'
//                        '-DCMAKE_BUILD_TYPE=Debug'
                cppFlags "-std=c++11 -frtti -fexceptions"
                cppFlags.add("-Werror=return-type");
                cppFlags.add("-Werror=format");

                cFlags "-std=gnu11"
                abiFilters "armeabi-v7a","arm64-v8a"
            }
        }

//        task copyTask(type: Copy) {
//
//        }
//
//        tasks.withType(JavaCompile) {
//            compileTask -> compileTask.dependsOn copyTask
//        }

        //setProperty("archivesBaseName", '"$SdkVersionName"')

        buildConfigField('String', 'SERVER_TYPE', '"release"')

        buildConfigField('String', 'SDK_VERSION', '"' + SdkVersionName + '"')
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            buildConfigField('String', 'SERVER_TYPE', '"release"')
            //            buildConfigField('String', 'SDK_VERSION', '"' + SdkVersionName + '"')
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            buildConfigField('String', 'SERVER_TYPE', '"release"')
            jniDebuggable true
        }
    }
    externalNativeBuild {
        cmake {
            path 'jni/CMakeLists.txt'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    //sourceSets { main { renderscript.srcDirs = ['src/main/rs', 'src/main/rs/'] } }
}

uploadArchives {
    repositories {
        flatDir {
            dirs 'libs'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'com.android.support:appcompat-v7:25.3.1'
    testImplementation 'junit:junit:4.12'
}

task copyAAR(type: Copy) {
    from 'build/outputs/aar'
    into '../../SDKBuild/aar'
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn(copyAAR)
}

//copyAAR.dependsOn "assemble"


boolean isDebugMode() {
    boolean ret = false
    try {
        Properties properties = new Properties()
        File file = project.rootProject.file('local.properties')
        if (!file.exists()) {
            return false
        }
        properties.load(file.newDataInputStream())
        String debugStr = properties.getProperty("DebugMode")
        if (debugStr != null && debugStr.length() > 0) {
            ret = debugStr.toBoolean()
        }

    } catch (Throwable throwable) {
        throwable.printStackTrace()
        ret = false
    }
    project.logger.error("[${project.name}]Debug:${ret}")

    return ret
}